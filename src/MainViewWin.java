 


import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;


public class MainViewWin extends javax.swing.JFrame {
  
    
    public ModelUser UserM = new ModelUser();
    public ModelConcerts ConcertsM = new ModelConcerts();
    public ModelContragent ContragentM = new ModelContragent();
    public ModelCountry CountryM = new ModelCountry();
    public ModelCity CityM = new ModelCity();
    public ModelPerformers PerformersM = new ModelPerformers();
    public ModelTypeExpenditure TypeExpenditureM = new ModelTypeExpenditure();
    public ModelTickets TicketsM = new ModelTickets();
    public ModelEvents EventsM = new ModelEvents();
    public ModelExpenditureToConcerts ExpenditureToConcertsM = new ModelExpenditureToConcerts();
    public ModelPerformersConcerts PerformersConcertsM = new ModelPerformersConcerts();
    private	ModalWindow MW= new ModalWindow();
    private  Reports Report= new Reports();
    /**
     * Creates new form MainViewWin
     */
    public MainViewWin() {
        initComponents();
        this.setPreferredSize(new Dimension(850, 555));
        this.pack();
        this.setLocationRelativeTo(null);
       // this.setVisible(true);
        this.jPanel1.setLayout(new FlowLayout());
        this.jPanel1.revalidate();
    //  this.setResizable(false);
    }
    
       private void CreateNew(Model Md)
    {
       this.jPanel1.removeAll();
       this.jPanel1.revalidate();
       this.jPanel1.add(Md.spaneltable);
       Md.MainViewWin=this;
       Md.Fill();   
       Md.fullsize();
      // this.setVisible(true); 
       currentModel=Md;
        this.jPanel1.revalidate();
        Md.CreateFieldOnPanel(0, true);
        
    }   
       
      // private Model currentReport;
         private void ShowReport(String nameReport,String sql,Boolean ShowRowNumber)
     {
         
         Report.MainViewWin=this ;
         Report.Name=nameReport ;
         Report.ShowRowNumber=ShowRowNumber;
         Report.CreateTible(sql);
         this.jPanel1.removeAll();
         JLabel label = new JLabel("Отчет: "+nameReport);
         this.jPanel1.add(label);
             if (this.PanelOnReport instanceof JPanel)
       {
           this.jPanel1.add(this.PanelOnReport);
            System.out.println("PanelOnReport: " + this.PanelOnReport.getName());
       }
         this.jPanel1.add(Report.spaneltable);
         Report.fullsize();
         Report.spaneltable.setVisible(true);
         this.setVisible(true);  
     }   
     private void ShowReport(String nameReport,String sql)
     {
         ShowReport(nameReport,sql,true);
       
     }
       
      private Model currentModel;
      private JPanel PanelOnReport ;
    private void InsertTable(Model Md)
    {
       this.jPanel1.removeAll();
       this.jPanel1.revalidate();
   
       this.jPanel1.add(Md.spaneltable);
       Md.MainViewWin=this;
       Md.Fill();   
      // this.setVisible(true); 
       
       currentModel=Md;
        currentModel.fullsize();
     
        
        this.jPanel1.revalidate();
         
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenu();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem25 = new javax.swing.JMenuItem();
        jMenuItem26 = new javax.swing.JMenuItem();
        jMenuItem27 = new javax.swing.JMenuItem();
        jMenuItem28 = new javax.swing.JMenuItem();
        jMenuItem29 = new javax.swing.JMenuItem();
        jMenuItem30 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Управление концертами");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jPanel1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel1AncestorResized(evt);
            }
        });
        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentResized(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 833, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 333, Short.MAX_VALUE)
        );

        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jMenu8.setText("Концерты");

        jMenuItem10.setText("Список концертов");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem10);

        jMenuItem11.setText("Добавить концерт");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem11);

        jMenuBar1.add(jMenu8);

        jMenu1.setText("Участники концертов");

        jMenuItem7.setText("Список");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem19.setText("Дoбавить участника концерта");
        jMenuItem19.setToolTipText("");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem19);

        jMenuBar1.add(jMenu1);

        jMenu9.setText("Выступающие");

        jMenuItem12.setText("Список");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem12);

        jMenuItem13.setText("Добавить новый");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem13);

        jMenuBar1.add(jMenu9);

        jMenu10.setText("Билеты");

        jMenuItem14.setText("Список билетов");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem14);

        jMenuItem15.setText("Добавить новый");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem15);

        jMenuBar1.add(jMenu10);

        jMenu11.setText("Корнтрагенты");

        jMenuItem16.setText("Список");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem16);

        jMenuItem17.setText("Новый");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem17);

        jMenuBar1.add(jMenu11);

        jMenu6.setText("Пользователи");

        jMenuItem1.setText("Список пользователей");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem1);

        jMenuItem9.setText("Добавить пользователя");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem9);

        jMenuBar1.add(jMenu6);

        jMenu7.setText("Журнал");
        jMenu7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu7ActionPerformed(evt);
            }
        });

        jMenuItem6.setText("Список событий");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem6);

        jMenuBar1.add(jMenu7);

        jMenu5.setText("Расходы на концерт");

        jMenuItem20.setText("Список");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem20);

        jMenuItem21.setText("Добавить новый");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem21);

        jMenuBar1.add(jMenu5);

        jMenu4.setText("Отчеты");

        jMenuItem23.setText("Афиша выступающих");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem23);

        jMenuItem24.setText("Афиша мероприятий");
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem24ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem24);

        jMenuItem22.setText("Частота выступлений исполнителей");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem22);

        jMenuItem25.setText("Бюджеты мероприятий");
        jMenuItem25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem25ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem25);

        jMenuItem26.setText("Задолженность по мероприятиям");
        jMenuItem26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem26ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem26);

        jMenuItem27.setText("Задолженность по контрагентам");
        jMenuItem27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem27ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem27);

        jMenuItem28.setText("Задолженность по исполнителям");
        jMenuItem28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem28ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem28);

        jMenuItem29.setText("Продаваемость билетов");
        jMenuItem29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem29ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem29);

        jMenuItem30.setText("Прибыльность мероприятий");
        jMenuItem30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem30ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem30);

        jMenuBar1.add(jMenu4);

        jMenu3.setText("Справочник");
        jMenu3.add(jSeparator2);

        jMenuItem5.setText("Страны");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem18.setText("Добавить страну");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem18);

        jMenuItem4.setText("Города");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem2.setText("Добавить город");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);
        jMenu3.add(jSeparator1);

        jMenuItem8.setText("Типы расходов");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem3.setText("Добавить тип расхода");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Выход");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
       if( CheckAccess("city","select"))  InsertTable(CityM      );
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
       if( CheckAccess("type_expenditure","select"))   InsertTable(TypeExpenditureM       );
    }//GEN-LAST:event_jMenuItem8ActionPerformed

      
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    if( CheckAccess("users","select"))    InsertTable(UserM);
       
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
    if( CheckAccess("contragent","create"))    CreateNew(UserM)   ;
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
     if( CheckAccess("country","create"))    CreateNew(CountryM)   ;
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
       if( CheckAccess("concerts","create"))    CreateNew(ConcertsM)   ;
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
          if ( MW.YesNoBox("Вы дейсвительно хотите выйти?","Подтверждение")==0) 
          {
             UserM.saveLog(0,"","Выход из системы");
              ConnectDB.getInstance().disconnect();
              System.out.println("exit " );
              System.exit(0);
          }   
    }//GEN-LAST:event_jMenu2MouseClicked

    
    private boolean CheckAccess(String table,String operation)
    {
        boolean res=Auth.getInstance().Access(table, operation);
        if (!res)      MW.errorBox("У вас недастаточно для выполнения данного действия", "Авторизация");
        return res;
    }
    
    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
          if ( MW.YesNoBox("Вы дейсвительно хотите выйти?","Подтверждение")==0) 
          {   
              
              UserM.saveLog(0,"","Выход из системы");
              System.out.println("exit " );
               ConnectDB.getInstance().disconnect();
              System.exit(0);
          }   
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
       
       if( CheckAccess("concerts","select"))    InsertTable(ConcertsM );
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        
        if( CheckAccess("performers","select"))   InsertTable(PerformersM  ); 
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        if( CheckAccess("tickets","select"))   InsertTable(TicketsM   );
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
          if( CheckAccess("contragent","select"))   InsertTable(ContragentM    );
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
          if( CheckAccess("country","select"))  InsertTable(CountryM     );
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenu7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu7ActionPerformed
        
    }//GEN-LAST:event_jMenu7ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
// InsertTable(EventsM     );
        if( CheckAccess("events","select"))  

         this.ShowReport("Журнал событий",
   "SELECT  ev.id , us.name Пользователь, ev.crud Операция, ev.entity Таблица, ev.note Примечние, ev.date_add `Дата и время`"+ 
   " FROM events ev "+ 
   " LEFT JOIN users us ON us.id = ev.id_user "+ 
   " ORDER BY ev.id DESC",false);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
      if( CheckAccess("contragent","create"))    CreateNew(ContragentM)   ;  
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
     if( CheckAccess("tickets","create")) CreateNew(TicketsM)   ;  
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
      if( CheckAccess("performers","create"))   CreateNew(PerformersM)   ; 
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
         if( CheckAccess("city","create"))  CreateNew(CityM)   ; 
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
      if( CheckAccess("type_expenditure","create"))   CreateNew(TypeExpenditureM)   ; 
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
       if( CheckAccess("performers_to_concerts","select"))   InsertTable(PerformersConcertsM  );
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
       if( CheckAccess("performers_to_concerts","create"))   CreateNew(PerformersConcertsM)   ; 
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jPanel1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentResized
      /* Md.spaneltable.setPreferredSize(this.jPanel1.getSize());
        Md.dtable.setPreferredSize(this.jPanel1.getSize());
        Md.dtable.revalidate();
        Md.spaneltable.revalidate();*/
                if (currentModel instanceof  Model)      currentModel.fullsize();
               if (this.Report instanceof  Reports)   Report.fullsize();
    }//GEN-LAST:event_jPanel1ComponentResized

    private void jPanel1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel1AncestorResized
        if (currentModel instanceof  Model)        currentModel.fullsize();
        if (this.Report instanceof  Reports)   Report.fullsize();
    }//GEN-LAST:event_jPanel1AncestorResized

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
     if( CheckAccess("expenditure_to_concerts","select"))   InsertTable(ExpenditureToConcertsM  );
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
    if( CheckAccess("expenditure_to_concerts","create"))    CreateNew(ExpenditureToConcertsM)   ; 
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
 if( CheckAccess("reports","select"))         
     this.ShowReport("Частота выступлений исполнителей",
   "SELECT pf.name, pf.adress, pf.phone, pf.note, ct.name AS city, cu.name AS country, COUNT(pf.id) AS count "+
   " FROM performers_to_concerts cn "+
   " LEFT JOIN performers pf  ON cn.id_performers=pf.id "+
   " LEFT JOIN city ct  ON pf.id_city=ct.id "+
   " LEFT JOIN country cu  ON ct.id_country=cu.id "+
   " GROUP BY pf.id " + 
   "ORDER BY count DESC");
      
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentResized

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
         if( CheckAccess("reports","select"))
          this.ShowReport("Афиша выступающих",
   "SELECT  pf.name, pf.note, ct.name AS event, ct.date_concert "+
   "FROM performers_to_concerts ptc  "+ 
  "LEFT JOIN  performers pf ON ptc.id_performers = pf.id "+ 
  "LEFT JOIN  concerts ct ON ptc.id_concerts = ct.id "+ 
  "ORDER BY ct.date_concert ");
    }//GEN-LAST:event_jMenuItem23ActionPerformed

    private void jMenuItem25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem25ActionPerformed
 if( CheckAccess("reports","select"))        
        
         this.ShowReport("Бюджеты мероприятий",
   "SELECT  con.name,con.date_concert, "+
   "      COALESCE( SUM(cn.price),0 ) AS for_performers    , "+ 
   "      COALESCE( SUM(ec.total_price),0) AS for_expenditure, "+ 
   "      COALESCE( SUM(cn.price),0 )   +  COALESCE( SUM(ec.total_price),0)  AS total "+ 
   " FROM concerts con "+ 
   " LEFT JOIN performers_to_concerts cn ON con.id = cn.id_concerts "+ 
   " LEFT JOIN expenditure_to_concerts ec  ON con.id = ec.id_concerts   "+ 
   " GROUP BY con.id  "+ 
   " ORDER BY con.date_concert ");   
    }//GEN-LAST:event_jMenuItem25ActionPerformed

    private void jMenuItem27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem27ActionPerformed
 if( CheckAccess("reports","select"))       
           this.ShowReport(jMenuItem28.getText(),
   "  SELECT pf.name Контрагент,con.name Мероприятие, con.date_concert `Дата мероприятия`,   "+
       "     COALESCE( SUM(ptc.total_price),0 ) AS `По договору нужно`    , "+
       "     COALESCE( SUM(ptc.make_price),0 ) AS Оплачено    , "+
        "    COALESCE( SUM(ptc.total_price),0 )    -  COALESCE( SUM(ptc.make_price),0 )      AS Задолженность "+
 " FROM concerts con "+
  "LEFT JOIN expenditure_to_concerts ptc ON con.id = ptc.id_concerts "+
  "LEFT JOIN contragent pf ON pf.id = ptc.id_contragent "+
 "   GROUP BY pf.id,con.id  "+
  " HAVING Задолженность!=0 "+
   "ORDER BY con.date_concert "); 
        
    }//GEN-LAST:event_jMenuItem27ActionPerformed

    private void jMenuItem26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem26ActionPerformed
 if( CheckAccess("reports","select"))         
         this.ShowReport("Задолженность по мероприятиям",
   "SELECT  con.name,con.date_concert,   "+ 
   "         COALESCE( SUM(cn.price),0 ) AS for_performers_need    ,  "+ 
   "         COALESCE( SUM(cn.make_price),0 ) AS for_performers_make    ,  "+ 
    "        COALESCE( SUM(ec.total_price),0) AS for_expenditure_need,  "+ 
    "        COALESCE( SUM(ec.make_price),0) AS for_expenditure_make,  "+ 
   "        COALESCE( SUM(cn.price),0 )   +   COALESCE( SUM(ec.total_price),0) AS total_need,  "+ 
    "       COALESCE( SUM(cn.make_price),0 )+ COALESCE( SUM(ec.make_price),0)  AS total_make ,  "+ 
    "         COALESCE( SUM(cn.price),0 )   +   COALESCE( SUM(ec.total_price),0)  "+ 
  "-(   COALESCE( SUM(cn.make_price),0 )+ COALESCE( SUM(ec.make_price),0)    ) AS total "+ 
  "FROM concerts con  "+ 
  "LEFT JOIN performers_to_concerts cn ON con.id = cn.id_concerts  "+ 
  "LEFT JOIN expenditure_to_concerts ec  ON con.id = ec.id_concerts    "+ 
  " GROUP BY con.id    "+ 
  " HAVING total!=0  "+ 
   "ORDER BY con.date_concert  ");
  
        
    }//GEN-LAST:event_jMenuItem26ActionPerformed

    private void jMenuItem24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem24ActionPerformed
 if( CheckAccess("reports","select"))         
         this.ShowReport("Афиша мероприятий",
   "SELECT    ct.name Мероприятие , ct.date_concert Дата, COUNT(DISTINCT ptc.id_performers) AS Участников   "+ 
   "  ,COALESCE( GROUP_CONCAT(pf.name),'') AS Участники   "+ 
 "  FROM  concerts ct   "+ 
  " LEFT JOIN  performers_to_concerts ptc  ON ct.id = ptc.id_concerts   "+ 
  "  LEFT JOIN  performers pf  ON pf.id = ptc.id_performers   "+ 
  " GROUP BY ct.id   "+ 
  " ORDER BY ct.date_concert   ");
        
        
    }//GEN-LAST:event_jMenuItem24ActionPerformed

  public void  ReportCounTikers(int percent)
  {
       if( CheckAccess("reports","select"))         
        
        
          this.ShowReport(jMenuItem29.getText(),
   "    SELECT    ct.name Мероприятие ,t.type `Тип билета`, ct.date_concert Дата,  "+ 
  "SUM(t.count_total) `Общее количество`,  "+ 
  "SUM(t.count_sales) `Продано`, "+ 
  "GROUP_CONCAT(t.price) `Цена билета`, "+ 
"SUM(t.count_total*t.price) `Возможная выручка`, "+ 
 " SUM(t.count_sales*t.price) `Выручка` "+ 
  "FROM  concerts ct "+ 
  "LEFT JOIN   tickets t ON t.id_concerts = ct.id "+ 
  "GROUP BY ct.id,t.type "+ 
  "HAVING `Общее количество`>0 && `Продано`*100/`Общее количество` >"+ percent+
 " ORDER BY ct.date_concert ");
  }
    
    private void jMenuItem29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem29ActionPerformed
 
        
          JPanel panel = new JPanel();
          panel.setLayout(new BorderLayout());
          
           JLabel  label= new JLabel("Процент проданных не менее , %");
           JSpinner  field= new JSpinner(new SpinnerNumberModel(0, 0, 100, 10));
          field.setValue(10);
           field.setVisible(true);
            field.revalidate();
          JButton Button = new JButton("Расчитать");
             
          panel.add(field, BorderLayout.WEST ); panel.add(label );
          panel.add(Button );
          
          Button.addActionListener(new ActionListener()
            {
              public void actionPerformed(ActionEvent e)
              {
           ReportCounTikers( (Integer)field.getValue() );
              }
            });
         
          this.PanelOnReport=panel;          
          
       ReportCounTikers(10);
       
   this.PanelOnReport=null;
    }//GEN-LAST:event_jMenuItem29ActionPerformed

    private void jMenuItem28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem28ActionPerformed
 if( CheckAccess("reports","select"))       
           this.ShowReport(jMenuItem28.getText(),
   "  SELECT pf.name Исполнитель,con.name Мероприятие, con.date_concert `Дата мероприятия`,   "+
       "     COALESCE( SUM(ptc.price),0 ) AS `По договору нужно`    , "+
       "     COALESCE( SUM(ptc.make_price),0 ) AS Оплачено    , "+
        "          COALESCE( SUM(ptc.price),0 )    -  COALESCE( SUM(ptc.make_price),0 )      AS Задолженность "+
 " FROM concerts con "+
  "LEFT JOIN performers_to_concerts ptc ON con.id = ptc.id_concerts "+
  "LEFT JOIN performers pf ON pf.id = ptc.id_performers "+
 "   GROUP BY pf.id,con.id  "+
  " HAVING Задолженность!=0 "+
   "ORDER BY con.date_concert ");
  
        
        
    }//GEN-LAST:event_jMenuItem28ActionPerformed

    private void jMenuItem30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem30ActionPerformed
 if( CheckAccess("reports","select"))         
         this.ShowReport("Прибыльность мероприятий",
   "SELECT\n" +
"  con.NAME Мероприятие,\n" +
"  con.date_concert Дата,\n" +
"  COALESCE(cn.`Исполнителям должны`,0)`Исполнителям должны`,\n" +
"  COALESCE(cn.`Исполнителям оплатили`,0)`Исполнителям оплатили`,\n" +
"  COALESCE(ec.`Контрагентам должны`,0)`Контрагентам должны`,\n" +
"  COALESCE( ec.`Контрагентам оплатили`,0)`Контрагентам оплатили`,\n" +
"  COALESCE(t.`Выручка продажа билетов`,0)`Выручка продажа билетов`,\n" +
"  COALESCE(t.`Возможная выручка билеты`,0)`Возможная выручка билеты`,\n" +
"  \n" +
"  -COALESCE(cn.`Исполнителям должны`,0)\n" +
"  -COALESCE(ec.`Контрагентам должны`,0)\n" +
"  +COALESCE(t.`Выручка продажа билетов`,0) Прибыль\n" +
"  \n" +
"FROM concerts con\n" +
"\n" +
" LEFT JOIN (SELECT\n" +
"      id_concerts,\n" +
"      COALESCE(SUM(price), 0) AS `Исполнителям должны` ,\n" +
"      COALESCE(SUM(make_price), 0) AS `Исполнителям оплатили`\n" +
"    FROM performers_to_concerts\n" +
"    GROUP BY id_concerts) cn\n" +
"    ON con.ID = cn.id_concerts\n" +
"\n" +
" \n" +
"  LEFT JOIN (SELECT\n" +
"      id_concerts,\n" +
"      COALESCE(SUM(total_price), 0) AS `Контрагентам должны`,\n" +
"      COALESCE(SUM(make_price), 0) AS `Контрагентам оплатили`\n" +
"    FROM expenditure_to_concerts\n" +
"    GROUP BY id_concerts) ec\n" +
"    ON con.ID = ec.id_concerts\n" +
"  LEFT JOIN (SELECT\n" +
"      id_concerts,\n" +
"      SUM(DISTINCT  count_sales *  price) `Выручка продажа билетов`,\n" +
"      SUM(DISTINCT  count_total *  price) `Возможная выручка билеты` \n" +
"       FROM tickets   GROUP BY id_concerts ) t\n" +
"    ON con.ID = t.id_concerts\n" +
"\n" +
"GROUP BY con.ID\n" +
"ORDER BY con.date_concert ");  
        
        
    }//GEN-LAST:event_jMenuItem30ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainViewWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainViewWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainViewWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainViewWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainViewWin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem26;
    private javax.swing.JMenuItem jMenuItem27;
    private javax.swing.JMenuItem jMenuItem28;
    private javax.swing.JMenuItem jMenuItem29;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem30;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
